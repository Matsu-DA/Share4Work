package jp.test;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;

public class EncodeBase64 {
	public static void main(String[] args) {

		String fileName = "C:\\work\\hibernate-validator-6.0.5.Final.zip";

		EncodeBase64 ob = new EncodeBase64();
		byte[] fileBinary=null;
		try {
			fileBinary = ob.encodeFileToBinary(fileName);
		}catch(IOException e) {
			System.out.println(e);
		}
		String generateString = new String(Base64.getEncoder().encode(fileBinary));

		BufferedWriter bw = null;
		FileWriter fw = null;

		String outputFilePath = "C:\\work\\output.txt";

		try {
			fw = new FileWriter(new File(outputFilePath));
			bw = new BufferedWriter(fw);
			bw.write(generateString);

			System.out.println("Done");

		} catch (IOException e) {
			System.out.println(e);
		} finally {

			try {
				if (bw != null)
					bw.close();

				if (fw != null)
					fw.close();
			}catch(IOException e) {
				System.out.println(e);

			}
		}
	}

	private byte[] encodeFileToBinary(String fileName) throws IOException {
		File file = new File(fileName);
		byte[] bytes = loadFile(file);

		return bytes;
	}

	private static byte[] loadFile(File file) throws IOException {
		InputStream is = new FileInputStream(file);

		long length = file.length();
		if (length > Integer.MAX_VALUE) {
			// File is too large
		}
		byte[] bytes = new byte[(int) length];

		int offset = 0;
		int numRead = 0;
		while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
			offset += numRead;
		}

		is.close();
		if (offset < bytes.length) {
			throw new IOException("Could not completely read file " + file.getName());
		}

		return bytes;
	}

}

package jp.co.test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;

public class EncodeBased64Binary {


	public static void main(String args[]) throws IOException {


		StringBuilder stringBuilder = new StringBuilder();

		for(int i =1;i<8;i++)
		{
			File file = new File("C:\\work\\hibernate"+i+".txt");
			BufferedReader br = new BufferedReader(new FileReader(file));

			  String str = br.readLine();
			  while(str != null){
				  stringBuilder.append(str.replaceAll("\r\n", "").replaceAll("\r", "").replaceAll("\n", ""));
				  str = br.readLine();
			  }
			br.close();
		}

		String base64String = stringBuilder.toString();
		byte[] fileBinary =Base64.getDecoder().decode(base64String);
		String outputFilePath = "C:\\work\\output.zip";
		new EncodeBased64Binary().decodeBinaryToFile(outputFilePath, fileBinary);
	}

	private void decodeBinaryToFile(String filePath, byte[] content) throws IOException {
		FileOutputStream stream = new FileOutputStream(filePath);
		try {
			stream.write(content);
		} finally {
			stream.close();
		}
	}


	private static byte[] loadFile(File file) throws IOException {
		InputStream is = new FileInputStream(file);

		long length = file.length();
		if (length > Integer.MAX_VALUE) {
			// File is too large
		}
		byte[] bytes = new byte[(int) length];

		int offset = 0;
		int numRead = 0;
		while (offset < bytes.length && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
			offset += numRead;
		}

		is.close();
		if (offset < bytes.length) {
			throw new IOException("Could not completely read file " + file.getName());
		}

		return bytes;
	}
}
